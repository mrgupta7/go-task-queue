version: '3.8'

services:
  # Task Queue Application (Primary)
  task-queue-1:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile
    container_name: task-queue-primary
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - WORKER_COUNT=5
      - QUEUE_SIZE=1000
      # Redis integration coming soon!
      # - REDIS_URL=redis://redis:6379
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - task-queue-network
    restart: unless-stopped

  # Task Queue Application (Secondary - for scaling demo)
  task-queue-2:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile
    container_name: task-queue-secondary
    ports:
      - "8081:8080"
    environment:
      - PORT=8080
      - WORKER_COUNT=3
      - QUEUE_SIZE=500
      # Redis integration coming soon!
      # - REDIS_URL=redis://redis:6379
    depends_on:
      - task-queue-1
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 15s
    networks:
      - task-queue-network
    restart: unless-stopped

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: task-queue-loadbalancer
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - task-queue-1
      - task-queue-2
    networks:
      - task-queue-network
    restart: unless-stopped

  # TODO: Redis for distributed queuing (coming soon!)
  # redis:
  #   image: redis:7-alpine
  #   container_name: task-queue-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - task-queue-network

networks:
  task-queue-network:
    driver: bridge
