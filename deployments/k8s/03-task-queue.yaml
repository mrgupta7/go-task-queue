apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-queue
  namespace: task-queue-system
  labels:
    app.kubernetes.io/name: task-queue
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: task-queue-system
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: task-queue
  template:
    metadata:
      labels:
        app.kubernetes.io/name: task-queue
        app.kubernetes.io/component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/api/v1/stats"
    spec:
      containers:
      - name: task-queue
        image: go-task-queue:latest # Replace with your actual image
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: task-queue-config
              key: PORT
        - name: WORKER_COUNT
          valueFrom:
            configMapKeyRef:
              name: task-queue-config
              key: WORKER_COUNT
        - name: QUEUE_SIZE
          valueFrom:
            configMapKeyRef:
              name: task-queue-config
              key: QUEUE_SIZE
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: task-queue-secrets
              key: REDIS_URL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      securityContext:
        fsGroup: 1001
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: task-queue-service
  namespace: task-queue-system
  labels:
    app.kubernetes.io/name: task-queue
    app.kubernetes.io/component: application
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: task-queue

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: task-queue-hpa
  namespace: task-queue-system
  labels:
    app.kubernetes.io/name: task-queue
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: task-queue
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60